import os
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import timedelta
from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler

# Streamlit sayfasÄ±nÄ± yapÄ±landÄ±rma
st.set_page_config(
    page_title="Borsa Tahmini UygulamasÄ±",
    page_icon="ğŸ“ˆ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS ile arayÃ¼z tasarÄ±mÄ±nÄ± iyileÅŸtirme
st.markdown("""
        <style>
        /* Sidebar arka planÄ±nÄ± deÄŸiÅŸtirmek */
        [data-testid="stSidebar"] {
            background-color: #B6CBBD !important;
            border-right: 4px solid #003311;
        }
        .stButton > button {
            background-color: #118000;
            color: white;   
            border-radius: 8px;
            padding: 10px;
            border: none;
            font-size: 16px;
            font-weight: bold;
        }
        .stButton > button:hover {
            background-color: #0b5600;
            color: white;
        }
        /* Success mesajÄ± dÃ¼zenlemesi */
        [data-testid="stNotification"] {
            background-color: #84f594 !important; /* Tahmin sonrasÄ± sidebar ile uyumlu renk */
            border-left: 5px solid #118000;
            color: #003311 !important;
            font-weight: bold;
        }
        h1 {
            color: #4CAF50;
            text-align: center;
            font-family: 'Arial', sans-serif;
        }
        .stRadio label {
            font-size: 8px;
            font-weight: bold;
            color: #524528;
        }
        .stSelectbox label, .stDateInput label {
            font-weight: bold;
            color: #524528;
        }
        /* Ãœst margin (margin-top) kaldÄ±rma */
        .block-container {
            padding-top: 5px !important;
            margin-top: 5px !important
        }
    </style>

""", unsafe_allow_html=True)


# BaÅŸlÄ±k
st.title("ğŸ“ˆ Borsa Tahmini UygulamasÄ±")

# AdÄ±m 1: Borsa SeÃ§imi
st.sidebar.header("AdÄ±m 1: Borsa SeÃ§imi")
borsa_secimi = st.sidebar.selectbox(
    "Hangi borsa iÃ§in tahmin yapmak istiyorsunuz?",
    [
        "NASDAQ 100 (^IXIC)",
        "S&P 500 (^GSPC)",
        "FTSE 100 (^FTSE)",
        "Nikkei 225 (^N225)",
        "BIST 100 (XU100.IS)",
        "CAC 40 (^FCHI)",
        "Dow Jones Industrial Average (^DJI)",

    ]
)

# Borsa koduna gÃ¶re seÃ§im
ticker_mapping = {
    "NASDAQ 100 (^IXIC)": "^IXIC",
    "S&P 500 (^GSPC)": "^GSPC",
    "FTSE 100 (^FTSE)": "^FTSE",
    "Nikkei 225 (^N225)": "^N225",
    "BIST 100 (XU100.IS)": "XU100.IS",
    "CAC 40 (^FCHI)":"^FCHI",
    "Dow Jones Industrial Average (^DJI)":"^DJI",
}
ticker_symbol = ticker_mapping[borsa_secimi]

# AdÄ±m 2: BugÃ¼nÃ¼n Tarihi GiriÅŸi
st.sidebar.header("AdÄ±m 2: BugÃ¼nÃ¼n Tarihi")
tarih_girisi = st.sidebar.date_input(
    "Tahmin iÃ§in bugÃ¼nÃ¼n tarihini giriniz:",
    value=pd.Timestamp.now().date()
)

# KullanÄ±cÄ± tarihi seÃ§tiÄŸinde end_date deÄŸiÅŸkenini gÃ¼ncelle ve deÄŸiÅŸiklik kontrolÃ¼ yap
if "end_date" not in st.session_state or st.session_state.end_date != tarih_girisi:
    st.session_state.end_date = tarih_girisi
    st.session_state.data_loaded = False  # Veriler yeniden yÃ¼klenecek

# Tahmin butonu
if st.sidebar.button("Tahmin Yap") or not st.session_state.data_loaded:
    try:
        # 1. Model YÃ¼kleme
        ticker = yf.Ticker(ticker_symbol)
        borsa_adi = ticker.info.get('shortName', borsa_secimi)
        st.session_state.borsa_adi = borsa_adi

        current_directory = os.getcwd()
        model_path = os.path.join(current_directory, ticker_symbol + ".h5")
        model = load_model(model_path)
        st.success("âœ… Model baÅŸarÄ±yla yÃ¼klendi!")

        # 2. Veri Ä°ndirme ve Ã–lÃ§eklendirme
        data = yf.download(ticker_symbol, start="2010-01-01", end=str(st.session_state.end_date))
        st.session_state.data = data
        close_prices = data['Close'].values.reshape(-1, 1)
        scaler = MinMaxScaler(feature_range=(0, 1))
        scaled_data = scaler.fit_transform(close_prices)

        # 3. Gelecekteki Tahminler
        last_60_days = scaled_data[-60:]
        temp_input = list(last_60_days.flatten())
        n_days = 5
        predictions = []

        # Gelecekteki tahmin tarihleri, tarih_girisi baz alÄ±narak baÅŸlatÄ±lÄ±yor
        future_dates = [tarih_girisi + timedelta(days=i) for i in range(n_days)]

        for i in range(n_days):
            X_test = np.array(temp_input[-60:]).reshape(1, 60, 1) #(Ã¶rnek sayÄ±sÄ±, zaman adÄ±mÄ±, Ã¶zellik sayÄ±sÄ±)
            predicted_value = model.predict(X_test, verbose=0)[0, 0] #verbose=0:Sessiz mod.HiÃ§bir bilgi yazdÄ±rÄ±lmaz.[0, 0] predict sonucutahminedilen ilk deÄŸeri almak iÃ§in kullanÄ±lÄ±r.
            predictions.append(predicted_value)
            temp_input.append(predicted_value)

        predictions = scaler.inverse_transform(np.array(predictions).reshape(-1, 1)) #Tahminleri eski hale geri dÃ¶ndÃ¼rÃ¼r
        # Tahmin sonuÃ§larÄ±nÄ± kaydet
        st.session_state.data_loaded = True
        st.session_state.close_prices = close_prices
        st.session_state.future_dates = future_dates
        st.session_state.predictions = predictions
    except Exception as e:
        st.error(f"Bir hata oluÅŸtu: {e}")

# EÄŸer tahmin yapÄ±ldÄ±ysa, veri tÃ¼rÃ¼ seÃ§imi gÃ¶ster
if st.session_state.data_loaded:
    # AdÄ±m 3: Veri GÃ¶rÃ¼nÃ¼mÃ¼
    st.sidebar.header("AdÄ±m 3: Veri GÃ¶rÃ¼nÃ¼mÃ¼")
    options = [
        "Tahmin GrafiÄŸi",
        "Son 10 GÃ¼n ve Tahmin",
        "GÃ¼nlÃ¼k DeÄŸiÅŸim ve Volatilite",
        "Hareketli Ortalamalar ve RSI",
        "Son 1 Ay ve Hareketli Ortalama",
        "Tahmin Tablosu",
        "Tahmin Ã–zeti"
    ]
    st.session_state.current_view = st.sidebar.radio("Hangi tÃ¼r veriyi gÃ¶rmek istersiniz?", options)

    # GÃ¶rÃ¼nÃ¼mler
    if st.session_state.current_view == "Tahmin GrafiÄŸi":
        st.subheader(f"{st.session_state.borsa_adi} - Gelecekteki Borsa Tahmini (Grafik)")
        fig, ax = plt.subplots(figsize=(14, 5))
        ax.plot(st.session_state.data.index[-60:], st.session_state.close_prices[-60:], label="GerÃ§ek Fiyatlar")
        ax.plot(st.session_state.future_dates, st.session_state.predictions, label="Tahmin Edilen Fiyatlar", color='orange')
        ax.set_title(f"{st.session_state.borsa_adi} - Gelecekteki Borsa Tahmini")
        ax.set_xlabel("Tarih")
        ax.set_ylabel("Fiyat")
        plt.xticks(rotation=45)
        ax.legend()     # Grafikteki Ã§izgiler iÃ§in bir aÃ§Ä±klama (legend) ekler.
        st.pyplot(fig)  # Streamlit aracÄ±lÄ±ÄŸÄ±yla grafiÄŸi kullanÄ±cÄ±ya gÃ¶sterir.


    elif st.session_state.current_view == "Tahmin Tablosu":
        st.subheader(f"{st.session_state.borsa_adi} - Tahmin SonuÃ§larÄ± (Tablo)")
        try:
            prediction_table = pd.DataFrame({
                'Tarih': [date.strftime('%Y-%m-%d') for date in st.session_state.future_dates],
                'Tahmin Edilen Fiyat': st.session_state.predictions.flatten() # Tahmin edilen fiyatlarÄ± tek boyutlu bir listeye dÃ¶nÃ¼ÅŸtÃ¼rÃ¼p tabloya ekler.
            })
            st.dataframe(prediction_table)
        except Exception as e:
            st.error(f"Tablo gÃ¶steriminde bir hata oluÅŸtu: {e}")

    elif st.session_state.current_view == "Son 10 GÃ¼n ve Tahmin":
        st.subheader(f"{st.session_state.borsa_adi} - Son 10 GÃ¼n ve Gelecek Tahmin")
        try:
            filtered_data = st.session_state.data.loc[:str(st.session_state.end_date)]
            real_last_10_days = filtered_data['Close'][-10:].values
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(filtered_data.index[-10:], real_last_10_days, label="Son 10 GÃ¼n GerÃ§ek FiyatlarÄ±", marker='o', color='blue')
            ax.plot(st.session_state.future_dates, st.session_state.predictions.flatten(), label="Gelecek Tahmin", marker='o', color='red')
            ax.set_title(f"{st.session_state.borsa_adi} - Son 10 GÃ¼n ve Gelecek Tahmin")
            ax.legend()
            ax.grid()
            st.pyplot(fig)
        except Exception as e:
            st.error(f"GÃ¶rselleÅŸtirme sÄ±rasÄ±nda bir hata oluÅŸtu: {e}")

    elif st.session_state.current_view == "GÃ¼nlÃ¼k DeÄŸiÅŸim ve Volatilite":
        st.subheader(f"{st.session_state.borsa_adi} - GÃ¼nlÃ¼k DeÄŸiÅŸim ve Volatilite")
        try:
            st.session_state.data['Daily Change (%)'] = st.session_state.data['Close'].pct_change() * 100
            st.session_state.data['Volatility'] = st.session_state.data['Daily Change (%)'].rolling(window=10).std()  # 10 gÃ¼nlÃ¼k hareketli standart sapma (volatilite) hesaplar.
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(st.session_state.data.index[-60:], st.session_state.data['Daily Change (%)'][-60:], label="GÃ¼nlÃ¼k Fiyat DeÄŸiÅŸimi (%)", color='purple')
            ax.plot(st.session_state.data.index[-60:], st.session_state.data['Volatility'][-60:], label="10 GÃ¼nlÃ¼k Volatilite", color='orange', linestyle='--')
            ax.set_title(f"{st.session_state.borsa_adi} - GÃ¼nlÃ¼k Fiyat DeÄŸiÅŸimi ve Volatilite")
            ax.legend()
            ax.grid()
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Veri analizi sÄ±rasÄ±nda bir hata oluÅŸtu: {e}")

    elif st.session_state.current_view == "Hareketli Ortalamalar ve RSI":
        st.subheader(f"{st.session_state.borsa_adi} - Hareketli Ortalamalar ve RSI")
        try:
            data = st.session_state.data
            delta = data['Close'].diff(1)  #GÃ¼nlÃ¼k kapanÄ±ÅŸ fiyatlarÄ±ndaki deÄŸiÅŸiklikleri hesaplar (bugÃ¼nkÃ¼ fiyat - dÃ¼nkÃ¼ fiyat)
            gain = delta.where(delta > 0, 0)  #Pozitif deÄŸiÅŸiklikleri alÄ±r (kazanÃ§)
            loss = -delta.where(delta < 0, 0)  #Negatif deÄŸiÅŸiklikleri alÄ±r (kayÄ±p), diÄŸer deÄŸerleri 0 olarak belirler.
            avg_gain = gain.rolling(window=14).mean()
            avg_loss = loss.rolling(window=14).mean()
            rs = avg_gain / avg_loss #        # RSI iÃ§in gerekli olan gÃ¶reli gÃ¼Ã§ oranÄ±nÄ± (Relative Strength) hesaplar.
            data['RSI'] = 100 - (100 / (1 + rs)) #RSI (Relative Strength Index) deÄŸerini hesaplar ve bir sÃ¼tuna kaydeder
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(data.index[-60:], data['RSI'][-60:], label="RSI (14 GÃ¼n)", color='purple')
            ax.axhline(70, color='red', linestyle='--', label="AÅŸÄ±rÄ± AlÄ±m (70)")
            ax.axhline(30, color='green', linestyle='--', label="AÅŸÄ±rÄ± SatÄ±m (30)")
            ax.set_title(f"{st.session_state.borsa_adi} - RSI")
            ax.legend()
            ax.grid()
            st.pyplot(fig)
        except Exception as e:
            st.error(f"RSI hesaplamasÄ± sÄ±rasÄ±nda bir hata oluÅŸtu: {e}")

    elif st.session_state.current_view == "Son 1 Ay ve Hareketli Ortalama":
        st.subheader(f"{st.session_state.borsa_adi} - Son 1 Ay ve Hareketli Ortalama")
        try:
            data = st.session_state.data 
            data['SMA_10'] = data['Close'].rolling(window=10).mean()  # 10 gÃ¼nlÃ¼k basit hareketli ortalamayÄ± hesaplar ve yeni bir sÃ¼tun olarak ekler.
            data['SMA_20'] = data['Close'].rolling(window=20).mean()
            
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(data.index[-30:], data['Close'][-30:], label="Son 1 Ay KapanÄ±ÅŸ FiyatÄ±", color='blue')
            ax.plot(data.index[-30:], data['SMA_10'][-30:], label="10 GÃ¼nlÃ¼k Hareketli Ortalama", color='orange')
            ax.plot(data.index[-30:], data['SMA_20'][-30:], label="20 GÃ¼nlÃ¼k Hareketli Ortalama", color='green')
            ax.plot(st.session_state.future_dates, st.session_state.predictions.flatten(), label="Gelecek Tahmin", color='red', linestyle='--')
            ax.set_title(f"{st.session_state.borsa_adi} - Son 1 Ay ve Hareketli Ortalama")
            ax.legend()
            ax.grid()
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Hareketli ortalama hesaplamasÄ±nda bir hata oluÅŸtu: {e}")

    elif st.session_state.current_view == "Tahmin Ã–zeti":
        st.subheader(f"{st.session_state.borsa_adi} - Gelecek Tahminlerin Ä°statistiksel Ã–zeti")
        try:
            predictions = st.session_state.predictions.flatten()
            st.write("ğŸ“Š Tahmin Ã–zeti:")
            st.metric("Ortalama Fiyat", f"{np.mean(predictions):.2f}")
            st.metric("Maksimum Fiyat", f"{np.max(predictions):.2f}")
            st.metric("Minimum Fiyat", f"{np.min(predictions):.2f}")
            st.metric("Standart Sapma", f"{np.std(predictions):.2f}")
        except Exception as e:
            st.error(f"Tahmin Ã¶zetinde bir hata oluÅŸtu: {e}")